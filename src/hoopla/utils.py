import json
import os
import sys
from typing import Any, Dict, List, Optional, Set

from dotenv import load_dotenv
from google import genai

from hoopla.config import CLI_DIR, DATA_DIR

BM25_K1 = 1.5
BM25_B = 0.75

SCORE_PRECISION = 3


def load_movies() -> List[Dict[str, Any]]:
    with open(DATA_DIR / "movies.json", mode="r", encoding="utf-8") as f:
        movie_database = json.load(f)["movies"]
    return movie_database


def load_stopwords() -> Set[str]:
    stopwords_path = DATA_DIR / "stopwords.txt"
    stopwords = stopwords_path.read_text(encoding="utf-8").splitlines()
    return set(stopwords)


def load_golden_dataset() -> dict:
    with open(DATA_DIR / "golden_dataset.json", mode="r", encoding="utf-8") as f:
        golden_dataset = json.load(f)
    return golden_dataset


def format_search_result(
    doc_id: str, title: str, document: str, score: float, **metadata: Any
) -> dict[str, Any]:
    """Create standardized search result

    Args:
        doc_id: Document ID
        title: Document title
        document: Display text (usually short description)
        score: Relevance/similarity score
        **metadata: Additional metadata to include

    Returns:
        Dictionary representation of search result
    """
    return {
        "id": doc_id,
        "title": title,
        "document": document,
        "score": round(score, SCORE_PRECISION),
        "metadata": metadata if metadata else {},
    }


def _load_prompt_enchance() -> dict[str, str]:
    prompts_path = CLI_DIR / "method_prompts.json"
    with open(prompts_path, mode="r", encoding="utf-8") as f:
        method_prompts = json.load(f)
    return method_prompts


def call_gemini(method: Optional[str] = None, **kwargs) -> str:
    load_dotenv()
    api_key = os.environ.get("GEMINI_API_KEY")
    client = genai.Client(api_key=api_key)

    prompts = _load_prompt_enchance()
    if method in prompts:
        print(f"Using the prompt method `{method}`")
        query = prompts[method].format(**kwargs)
    else:
        query = kwargs["query"]

    try:
        response = client.models.generate_content(
            model="gemini-2.0-flash-001", contents=query
        )
    except Exception as e:
        print("Unexpected error:", e)
        sys.exit(1)
    if response is None or response.text is None:
        print("No response generated by gemini.")
        sys.exit(1)
    return response.text
